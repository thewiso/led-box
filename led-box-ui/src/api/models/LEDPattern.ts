/* tslint:disable */
/* eslint-disable */
/**
 * LED Box API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Color,
    ColorFromJSON,
    ColorFromJSONTyped,
    ColorToJSON,
} from './';

import {
     BlinkLEDPatternFromJSONTyped,
     ChaseLEDPatternFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface LEDPattern
 */
export interface LEDPattern {
    /**
     * 
     * @type {number}
     * @memberof LEDPattern
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LEDPattern
     */
    name: string;
    /**
     * Colors that will be displayed in-line
     * @type {Array<Color>}
     * @memberof LEDPattern
     */
    colors: Array<Color>;
    /**
     * Describes how often the colors will be repeated in the LED strip. 0 = No repetition, 1 = One LED per color
     * @type {number}
     * @memberof LEDPattern
     */
    repitionFactor: number;
    /**
     * Describes how many of the LED of one color create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of LED create a gradient to the next and previous color
     * @type {number}
     * @memberof LEDPattern
     */
    colorGradientLengthFactor: number;
    /**
     * 
     * @type {string}
     * @memberof LEDPattern
     */
    patternType: string;
}

export function LEDPatternFromJSON(json: any): LEDPattern {
    return LEDPatternFromJSONTyped(json, false);
}

export function LEDPatternFromJSONTyped(json: any, ignoreDiscriminator: boolean): LEDPattern {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['patternType'] === 'BlinkLEDPattern') {
            return BlinkLEDPatternFromJSONTyped(json, true);
        }
        if (json['patternType'] === 'ChaseLEDPattern') {
            return ChaseLEDPatternFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'colors': ((json['colors'] as Array<any>).map(ColorFromJSON)),
        'repitionFactor': json['repitionFactor'],
        'colorGradientLengthFactor': json['colorGradientLengthFactor'],
        'patternType': json['patternType'],
    };
}

export function LEDPatternToJSON(value?: LEDPattern | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'colors': ((value.colors as Array<any>).map(ColorToJSON)),
        'repitionFactor': value.repitionFactor,
        'colorGradientLengthFactor': value.colorGradientLengthFactor,
        'patternType': value.patternType,
    };
}


