# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ...base.models.base_model_ import Model
from ...base.models.color import Color
from ...base import util

from ...base.models.color import Color  # noqa: E501

class ChaseLEDPatternAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chase_speed=None, chase_length_factor=None, chase_gradient_length_factor=None, chase_foreground=None):  # noqa: E501
        """ChaseLEDPatternAllOf - a model defined in OpenAPI

        :param chase_speed: The chase_speed of this ChaseLEDPatternAllOf.  # noqa: E501
        :type chase_speed: float
        :param chase_length_factor: The chase_length_factor of this ChaseLEDPatternAllOf.  # noqa: E501
        :type chase_length_factor: float
        :param chase_gradient_length_factor: The chase_gradient_length_factor of this ChaseLEDPatternAllOf.  # noqa: E501
        :type chase_gradient_length_factor: float
        :param chase_foreground: The chase_foreground of this ChaseLEDPatternAllOf.  # noqa: E501
        :type chase_foreground: Color
        """
        self.openapi_types = {
            'chase_speed': float,
            'chase_length_factor': float,
            'chase_gradient_length_factor': float,
            'chase_foreground': Color
        }

        self.attribute_map = {
            'chase_speed': 'chaseSpeed',
            'chase_length_factor': 'chaseLengthFactor',
            'chase_gradient_length_factor': 'chaseGradientLengthFactor',
            'chase_foreground': 'chaseForeground'
        }

        self._chase_speed = chase_speed
        self._chase_length_factor = chase_length_factor
        self._chase_gradient_length_factor = chase_gradient_length_factor
        self._chase_foreground = chase_foreground

    @classmethod
    def from_dict(cls, dikt) -> 'ChaseLEDPatternAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChaseLEDPattern_allOf of this ChaseLEDPatternAllOf.  # noqa: E501
        :rtype: ChaseLEDPatternAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chase_speed(self):
        """Gets the chase_speed of this ChaseLEDPatternAllOf.

        Describes how many LED per second the chase will move  # noqa: E501

        :return: The chase_speed of this ChaseLEDPatternAllOf.
        :rtype: float
        """
        return self._chase_speed

    @chase_speed.setter
    def chase_speed(self, chase_speed):
        """Sets the chase_speed of this ChaseLEDPatternAllOf.

        Describes how many LED per second the chase will move  # noqa: E501

        :param chase_speed: The chase_speed of this ChaseLEDPatternAllOf.
        :type chase_speed: float
        """
        if chase_speed is None:
            raise ValueError("Invalid value for `chase_speed`, must not be `None`")  # noqa: E501
        if chase_speed is not None and chase_speed > 150:  # noqa: E501
            raise ValueError("Invalid value for `chase_speed`, must be a value less than or equal to `150`")  # noqa: E501
        if chase_speed is not None and chase_speed < 1:  # noqa: E501
            raise ValueError("Invalid value for `chase_speed`, must be a value greater than or equal to `1`")  # noqa: E501

        self._chase_speed = chase_speed

    @property
    def chase_length_factor(self):
        """Gets the chase_length_factor of this ChaseLEDPatternAllOf.

        Describes how many of the strip's LED will be used for the chase. 0 = 1 LED, 0.99 = 99% of LED  # noqa: E501

        :return: The chase_length_factor of this ChaseLEDPatternAllOf.
        :rtype: float
        """
        return self._chase_length_factor

    @chase_length_factor.setter
    def chase_length_factor(self, chase_length_factor):
        """Sets the chase_length_factor of this ChaseLEDPatternAllOf.

        Describes how many of the strip's LED will be used for the chase. 0 = 1 LED, 0.99 = 99% of LED  # noqa: E501

        :param chase_length_factor: The chase_length_factor of this ChaseLEDPatternAllOf.
        :type chase_length_factor: float
        """
        if chase_length_factor is None:
            raise ValueError("Invalid value for `chase_length_factor`, must not be `None`")  # noqa: E501
        if chase_length_factor is not None and chase_length_factor > 0.99:  # noqa: E501
            raise ValueError("Invalid value for `chase_length_factor`, must be a value less than or equal to `0.99`")  # noqa: E501
        if chase_length_factor is not None and chase_length_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `chase_length_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chase_length_factor = chase_length_factor

    @property
    def chase_gradient_length_factor(self):
        """Gets the chase_gradient_length_factor of this ChaseLEDPatternAllOf.

        Describes how many of the LED of one the chase create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of the chase's LED create a gradient to the next and previous color  # noqa: E501

        :return: The chase_gradient_length_factor of this ChaseLEDPatternAllOf.
        :rtype: float
        """
        return self._chase_gradient_length_factor

    @chase_gradient_length_factor.setter
    def chase_gradient_length_factor(self, chase_gradient_length_factor):
        """Sets the chase_gradient_length_factor of this ChaseLEDPatternAllOf.

        Describes how many of the LED of one the chase create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of the chase's LED create a gradient to the next and previous color  # noqa: E501

        :param chase_gradient_length_factor: The chase_gradient_length_factor of this ChaseLEDPatternAllOf.
        :type chase_gradient_length_factor: float
        """
        if chase_gradient_length_factor is None:
            raise ValueError("Invalid value for `chase_gradient_length_factor`, must not be `None`")  # noqa: E501
        if chase_gradient_length_factor is not None and chase_gradient_length_factor > 0.5:  # noqa: E501
            raise ValueError("Invalid value for `chase_gradient_length_factor`, must be a value less than or equal to `0.5`")  # noqa: E501
        if chase_gradient_length_factor is not None and chase_gradient_length_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `chase_gradient_length_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chase_gradient_length_factor = chase_gradient_length_factor

    @property
    def chase_foreground(self):
        """Gets the chase_foreground of this ChaseLEDPatternAllOf.


        :return: The chase_foreground of this ChaseLEDPatternAllOf.
        :rtype: Color
        """
        return self._chase_foreground

    @chase_foreground.setter
    def chase_foreground(self, chase_foreground):
        """Sets the chase_foreground of this ChaseLEDPatternAllOf.


        :param chase_foreground: The chase_foreground of this ChaseLEDPatternAllOf.
        :type chase_foreground: Color
        """

        self._chase_foreground = chase_foreground
