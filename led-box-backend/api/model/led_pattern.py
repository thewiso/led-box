# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .color import Color
from api.util import util

from .color import Color  # noqa: E501

class LEDPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, colors=None, repition_factor=None, color_gradient_length_factor=None, animation_type=None, blink_speed=None, blink_dimming_period_factor=None, chase_speed=None, chase_length_factor=None, chase_gradient_length_factor=None, chase_foreground=None):  # noqa: E501
        """LEDPattern - a model defined in OpenAPI

        :param id: The id of this LEDPattern.  # noqa: E501
        :type id: int
        :param name: The name of this LEDPattern.  # noqa: E501
        :type name: str
        :param colors: The colors of this LEDPattern.  # noqa: E501
        :type colors: List[Color]
        :param repition_factor: The repition_factor of this LEDPattern.  # noqa: E501
        :type repition_factor: float
        :param color_gradient_length_factor: The color_gradient_length_factor of this LEDPattern.  # noqa: E501
        :type color_gradient_length_factor: float
        :param animation_type: The animation_type of this LEDPattern.  # noqa: E501
        :type animation_type: str
        :param blink_speed: The blink_speed of this LEDPattern.  # noqa: E501
        :type blink_speed: float
        :param blink_dimming_period_factor: The blink_dimming_period_factor of this LEDPattern.  # noqa: E501
        :type blink_dimming_period_factor: float
        :param chase_speed: The chase_speed of this LEDPattern.  # noqa: E501
        :type chase_speed: float
        :param chase_length_factor: The chase_length_factor of this LEDPattern.  # noqa: E501
        :type chase_length_factor: float
        :param chase_gradient_length_factor: The chase_gradient_length_factor of this LEDPattern.  # noqa: E501
        :type chase_gradient_length_factor: float
        :param chase_foreground: The chase_foreground of this LEDPattern.  # noqa: E501
        :type chase_foreground: Color
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'colors': List[Color],
            'repition_factor': float,
            'color_gradient_length_factor': float,
            'animation_type': str,
            'blink_speed': float,
            'blink_dimming_period_factor': float,
            'chase_speed': float,
            'chase_length_factor': float,
            'chase_gradient_length_factor': float,
            'chase_foreground': Color
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'colors': 'colors',
            'repition_factor': 'repitionFactor',
            'color_gradient_length_factor': 'colorGradientLengthFactor',
            'animation_type': 'animationType',
            'blink_speed': 'blinkSpeed',
            'blink_dimming_period_factor': 'blinkDimmingPeriodFactor',
            'chase_speed': 'chaseSpeed',
            'chase_length_factor': 'chaseLengthFactor',
            'chase_gradient_length_factor': 'chaseGradientLengthFactor',
            'chase_foreground': 'chaseForeground'
        }

        self._id = id
        self._name = name
        self._colors = colors
        self._repition_factor = repition_factor
        self._color_gradient_length_factor = color_gradient_length_factor
        self._animation_type = animation_type
        self._blink_speed = blink_speed
        self._blink_dimming_period_factor = blink_dimming_period_factor
        self._chase_speed = chase_speed
        self._chase_length_factor = chase_length_factor
        self._chase_gradient_length_factor = chase_gradient_length_factor
        self._chase_foreground = chase_foreground

    @classmethod
    def from_dict(cls, dikt) -> 'LEDPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LEDPattern of this LEDPattern.  # noqa: E501
        :rtype: LEDPattern
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LEDPattern.


        :return: The id of this LEDPattern.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LEDPattern.


        :param id: The id of this LEDPattern.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LEDPattern.


        :return: The name of this LEDPattern.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LEDPattern.


        :param name: The name of this LEDPattern.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 20:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `20`")  # noqa: E501

        self._name = name

    @property
    def colors(self):
        """Gets the colors of this LEDPattern.

        Colors that will be displayed in-line  # noqa: E501

        :return: The colors of this LEDPattern.
        :rtype: List[Color]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this LEDPattern.

        Colors that will be displayed in-line  # noqa: E501

        :param colors: The colors of this LEDPattern.
        :type colors: List[Color]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")  # noqa: E501

        self._colors = colors

    @property
    def repition_factor(self):
        """Gets the repition_factor of this LEDPattern.

        Describes how often the colors will be repeated in the LED strip. 0 = No repetition, 1 = One LED per color  # noqa: E501

        :return: The repition_factor of this LEDPattern.
        :rtype: float
        """
        return self._repition_factor

    @repition_factor.setter
    def repition_factor(self, repition_factor):
        """Sets the repition_factor of this LEDPattern.

        Describes how often the colors will be repeated in the LED strip. 0 = No repetition, 1 = One LED per color  # noqa: E501

        :param repition_factor: The repition_factor of this LEDPattern.
        :type repition_factor: float
        """
        if repition_factor is None:
            raise ValueError("Invalid value for `repition_factor`, must not be `None`")  # noqa: E501
        if repition_factor is not None and repition_factor > 1:  # noqa: E501
            raise ValueError("Invalid value for `repition_factor`, must be a value less than or equal to `1`")  # noqa: E501
        if repition_factor is not None and repition_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `repition_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repition_factor = repition_factor

    @property
    def color_gradient_length_factor(self):
        """Gets the color_gradient_length_factor of this LEDPattern.

        Describes how many of the LED of one color create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of LED create a gradient to the next and previous color  # noqa: E501

        :return: The color_gradient_length_factor of this LEDPattern.
        :rtype: float
        """
        return self._color_gradient_length_factor

    @color_gradient_length_factor.setter
    def color_gradient_length_factor(self, color_gradient_length_factor):
        """Sets the color_gradient_length_factor of this LEDPattern.

        Describes how many of the LED of one color create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of LED create a gradient to the next and previous color  # noqa: E501

        :param color_gradient_length_factor: The color_gradient_length_factor of this LEDPattern.
        :type color_gradient_length_factor: float
        """
        if color_gradient_length_factor is None:
            raise ValueError("Invalid value for `color_gradient_length_factor`, must not be `None`")  # noqa: E501
        if color_gradient_length_factor is not None and color_gradient_length_factor > 0.5:  # noqa: E501
            raise ValueError("Invalid value for `color_gradient_length_factor`, must be a value less than or equal to `0.5`")  # noqa: E501
        if color_gradient_length_factor is not None and color_gradient_length_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `color_gradient_length_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._color_gradient_length_factor = color_gradient_length_factor

    @property
    def animation_type(self):
        """Gets the animation_type of this LEDPattern.


        :return: The animation_type of this LEDPattern.
        :rtype: str
        """
        return self._animation_type

    @animation_type.setter
    def animation_type(self, animation_type):
        """Sets the animation_type of this LEDPattern.


        :param animation_type: The animation_type of this LEDPattern.
        :type animation_type: str
        """
        allowed_values = ["none", "blink", "chase"]  # noqa: E501
        if animation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `animation_type` ({0}), must be one of {1}"
                .format(animation_type, allowed_values)
            )

        self._animation_type = animation_type

    @property
    def blink_speed(self):
        """Gets the blink_speed of this LEDPattern.

        Describes how often the LED will blink in a second  # noqa: E501

        :return: The blink_speed of this LEDPattern.
        :rtype: float
        """
        return self._blink_speed

    @blink_speed.setter
    def blink_speed(self, blink_speed):
        """Sets the blink_speed of this LEDPattern.

        Describes how often the LED will blink in a second  # noqa: E501

        :param blink_speed: The blink_speed of this LEDPattern.
        :type blink_speed: float
        """
        if blink_speed is not None and blink_speed > 3:  # noqa: E501
            raise ValueError("Invalid value for `blink_speed`, must be a value less than or equal to `3`")  # noqa: E501
        if blink_speed is not None and blink_speed < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `blink_speed`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._blink_speed = blink_speed

    @property
    def blink_dimming_period_factor(self):
        """Gets the blink_dimming_period_factor of this LEDPattern.

        Describes how much of the blinking time is used for blinking. 0 = No dimming, 1 = Full period between on and off will be dimmed  # noqa: E501

        :return: The blink_dimming_period_factor of this LEDPattern.
        :rtype: float
        """
        return self._blink_dimming_period_factor

    @blink_dimming_period_factor.setter
    def blink_dimming_period_factor(self, blink_dimming_period_factor):
        """Sets the blink_dimming_period_factor of this LEDPattern.

        Describes how much of the blinking time is used for blinking. 0 = No dimming, 1 = Full period between on and off will be dimmed  # noqa: E501

        :param blink_dimming_period_factor: The blink_dimming_period_factor of this LEDPattern.
        :type blink_dimming_period_factor: float
        """
        if blink_dimming_period_factor is not None and blink_dimming_period_factor > 1:  # noqa: E501
            raise ValueError("Invalid value for `blink_dimming_period_factor`, must be a value less than or equal to `1`")  # noqa: E501
        if blink_dimming_period_factor is not None and blink_dimming_period_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `blink_dimming_period_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blink_dimming_period_factor = blink_dimming_period_factor

    @property
    def chase_speed(self):
        """Gets the chase_speed of this LEDPattern.

        Describes how many LED per second the chase will move  # noqa: E501

        :return: The chase_speed of this LEDPattern.
        :rtype: float
        """
        return self._chase_speed

    @chase_speed.setter
    def chase_speed(self, chase_speed):
        """Sets the chase_speed of this LEDPattern.

        Describes how many LED per second the chase will move  # noqa: E501

        :param chase_speed: The chase_speed of this LEDPattern.
        :type chase_speed: float
        """
        if chase_speed is not None and chase_speed > 300:  # noqa: E501
            raise ValueError("Invalid value for `chase_speed`, must be a value less than or equal to `300`")  # noqa: E501
        if chase_speed is not None and chase_speed < 1:  # noqa: E501
            raise ValueError("Invalid value for `chase_speed`, must be a value greater than or equal to `1`")  # noqa: E501

        self._chase_speed = chase_speed

    @property
    def chase_length_factor(self):
        """Gets the chase_length_factor of this LEDPattern.

        Describes how many of the strip's LED will be used for the chase. 0 = 1 LED, 0.99 = 99% of LED  # noqa: E501

        :return: The chase_length_factor of this LEDPattern.
        :rtype: float
        """
        return self._chase_length_factor

    @chase_length_factor.setter
    def chase_length_factor(self, chase_length_factor):
        """Sets the chase_length_factor of this LEDPattern.

        Describes how many of the strip's LED will be used for the chase. 0 = 1 LED, 0.99 = 99% of LED  # noqa: E501

        :param chase_length_factor: The chase_length_factor of this LEDPattern.
        :type chase_length_factor: float
        """
        if chase_length_factor is not None and chase_length_factor > 0.99:  # noqa: E501
            raise ValueError("Invalid value for `chase_length_factor`, must be a value less than or equal to `0.99`")  # noqa: E501
        if chase_length_factor is not None and chase_length_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `chase_length_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chase_length_factor = chase_length_factor

    @property
    def chase_gradient_length_factor(self):
        """Gets the chase_gradient_length_factor of this LEDPattern.

        Describes how many of the LED of one the chase create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of the chase's LED create a gradient to the next and previous color  # noqa: E501

        :return: The chase_gradient_length_factor of this LEDPattern.
        :rtype: float
        """
        return self._chase_gradient_length_factor

    @chase_gradient_length_factor.setter
    def chase_gradient_length_factor(self, chase_gradient_length_factor):
        """Sets the chase_gradient_length_factor of this LEDPattern.

        Describes how many of the LED of one the chase create a gradient to the next and previous color. 0 = No gradient, 0.5 Half of the chase's LED create a gradient to the next and previous color  # noqa: E501

        :param chase_gradient_length_factor: The chase_gradient_length_factor of this LEDPattern.
        :type chase_gradient_length_factor: float
        """
        if chase_gradient_length_factor is not None and chase_gradient_length_factor > 0.5:  # noqa: E501
            raise ValueError("Invalid value for `chase_gradient_length_factor`, must be a value less than or equal to `0.5`")  # noqa: E501
        if chase_gradient_length_factor is not None and chase_gradient_length_factor < 0:  # noqa: E501
            raise ValueError("Invalid value for `chase_gradient_length_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chase_gradient_length_factor = chase_gradient_length_factor

    @property
    def chase_foreground(self):
        """Gets the chase_foreground of this LEDPattern.

        When null, the pattern's color will be used for the chase and the background will be black. When not null, the chaseForeground will be used for the chase and the pattern's color will be used for the background  # noqa: E501

        :return: The chase_foreground of this LEDPattern.
        :rtype: Color
        """
        return self._chase_foreground

    @chase_foreground.setter
    def chase_foreground(self, chase_foreground):
        """Sets the chase_foreground of this LEDPattern.

        When null, the pattern's color will be used for the chase and the background will be black. When not null, the chaseForeground will be used for the chase and the pattern's color will be used for the background  # noqa: E501

        :param chase_foreground: The chase_foreground of this LEDPattern.
        :type chase_foreground: Color
        """

        self._chase_foreground = chase_foreground
